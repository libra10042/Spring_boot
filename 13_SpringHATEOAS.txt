Hypermedia As The Engine Of Application State
	- 서버 : 현재 리소스와 연관된 링크 정보를 클라이언트에게 제공한다.
	- 클라이언트 : 연관된 링크 정보를 바탕으로 리소스에 접근한다.
	- 연관된 링크 정보
		-- Relation
		-- Hypertext Reference
	- spring-boot-starter-hateoas 의존성 추가.
	- https://spring.io/understanding/HATEOAS
	- https://spring.io/guides/rest-hateoas/
	- https://dosc.spring.io/spring-hateoas/dosc/reference/html

0bjectMapper 제공
	- spring.jackson
	- Jackson2ObjectMapperBuilder
	
LinkDiscovers 제공
	- 클라이언트 쪽에서 링크 정보를 Rel 이름으로 찾을 때 사용할 수 있는 XPath 확장 클래스
───────────────────────────────────
Step1. dependency 추가.
<dependency>
	<groupId>org.springframework.book</groupId>
	<artifactId>spring-boot-starter-hateoas</artifactId>
</dependency>



Step2. TEST 추가
@RunWith(SpringRunner.class)
@WebMvcTest(SampleController.class)
public class SampleControllerTest{

	@Autowired
	MockMvc mockMvc;

	@Test	
	public void hello(){
		mockMvc.perform(get("/hello"))
			.andDo(print())
			.andExpect(status().isOk())
			.andExpect(jsonPath("s._links.self").exists());		
	}
}


@RestController
public class SampleController{
	@GetMapping("/hello")
	public Hello hello(){
		Hello hello = new Hello();
		hello.setPrefix("Hey,");
		hello.setName("Keesun");

		//링크 정보추가하기
		Resource<Hello> helloResource = new Resource<>(hello);
		helloResource.add(linkTo(methodOn(SampleController.class).hello()).withSelfRel());

		return helloResource;
	}
}

public class Hello{
	private String prefix;
	private String name; 

	//getter, setter, toString
}
───────────────────────────────────























