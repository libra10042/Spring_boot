■스프링 데이터 : Redis
: 캐시, 메시지 브로커, 키/밸류 스토어 등으로 사용 가능. 


의존성 추가
- spring-boot-starter-data-redis
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>

 
Redis 설치 미 실행 (도커)
- docker run -p 6379:6379 --name redis_boot -d redis
- docker exec -i -t redis_boot redis-cli


스프링 데이터 Redis
- https://projects.spring.io/spring-data-redis/
- StringRedisTemplate  또는 RedisTemplate
- extends CrudRepository


Redis 주요 커맨드
- https://redis.io/commands
- keys *
- get { key }
- hgetall { key }
- hget { key } {column}


커스터마이징
- spring.redis.*

─────────────────────────────────────────
@Component
public class RedisRunner implements ApplicationRunner{

    @Autowired
    StringRedisTemplate redisTemplate;

    @Autowired
    AccountRepository accountRepository;

    @Override
    public int run(ApplicationArguments args) throws Exception{
    	ValueOperation<String, String> values = redisTemplate.opsForValue();
	values.set("keesun", "whiteship");
	values.set("springboot", "2.0");
	values.set("hello", "world");

   	Account account = new Account();
 	account.setEmail("whiteship@email.com");
	account.setUsername("keesun");

	accountRepository.save(account);

	Optional<Account> byId = accountRepository.findById(account.getId());
  	System.out.println(byId.get().getUsername());
	System.out.println(byId.get().getEmail());

    }
}




@RedisHash("accounts")
public class Account{

	@Id
	private String id; 

	private String username;
	
	private String email;
	
	//getter, setter
}

public interface AccountRepository extends CrudRepository<Account, String>{	
}


















