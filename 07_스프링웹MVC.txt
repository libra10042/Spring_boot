스프링 웹 MVC 1부

스프링 웹 MVC
	- https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#spring-web

스프링 부트 MVC
	- 자동 설정으로 제공하는 여러 기본 기능(앞으로 살펴볼 예정)

스프링 MVC 확장
 	- @Configuration + WebMvcConfigurer

스프링 MVC 재정의
	- @Configuration + @EnableWebMvc

─────────────────────────────────────────────
Step1. test만들기

@RunWith(SpringRunner.class)
@WebMvcTest(UserController.class)
public class UserControllerTest{

	@Autowired
	MockMvc mockMvc;
	
	@Test
	public void hello(){
	        mockMvc.perform(get("/hello"))
		.andExpect(status().isOk())
		.andExpect(content().string("hello"));
	}
}

@RestController
public class UserController{

	@GetMapping("/hello")
	public String hello(){
	         return "hello";
	}
}
──────────────────────────────────────────
spring boot mvc의 기능을 확장하고 싶다면 ( + 추가설정)

@Configuration
@EnableWebMvc
public class WebConfig implements WebMvcConfigurer{

}

───────────────────────────────────────

스프링 웹 mvc2부 : HttpMessageConverters


HTTP 요청 본문을 객체로 변경하거나, 객체를 HTTP 응답 본문으로 변경할 때 사용. 
{"username" : "keesun", "password" : "123"} <--> User
	- @RequestBody
	- @ResponseBody

스프링 부트
	- 뷰 리졸버 설정 제공. 
	- HttpMessageConvertersAutoConfiguration


XML 메시지 컨버터 추가하기

<dependency>
	<groupId>com.fasterxml.jackson.dataformat</groupId>
	<artifactId>jackson-dataformat-xml</artifactId>
	<version>2.9.6</version>
</dependency>
			
----------------------------------
@RestController
public class UserController{

	@GetMapping("/hello")
	public String hello(){
		return "hello";
	}

	@PostMapping("/users/create")
	public User create(@RequestBody User user){
		return user; 
	}
}


@RunWith(SpringRunner.class)
@WebMvcTest(UserController.class)
public class UserControllerTest{

	@Autowired
	MockMvc mockMvc;
	
	@Test
	public void hello() throws Exception{
	        mockMvc.perform(get("/hello"))
		.andExpect(status().isOk())
		.andExpect(content().string("hello"));
	}
	
	@Test
	public void createUser_JSON(){
	         String userJson = "{\"username\":\"keesun\", \"password\":\"123\"}";
	         mockMvc.perform(post("/users/create")
			.contentType(MediaType.APPLICATION_JSON_UTF8)
			.accept(MediaType.APPLICATION_JSON_UTF8)
			.content(userJson))
		.andExpect(status().isOk())
		.andExpect(jsonPath("$.username", is(equalTo("keesun")))
		.andExpect(jsonPath("$.password", is(equalTo("123"))));
	}


}




public class User{

	private Long id; 
	private Sring username;
	privae String password; 

	//getter, setter
}

































