[동적 컨텐츠 생성방법]

■스프링 웹 MVC 7부 : Thymeleaf
                                       └주로 View를 만드는데 사용한다. 


스프링 부트가 자동 설정을 지원하는 템플릿 엔진. 
	- FreeMarker
	- Groovy
	- Mustache

JSP를 권장하지 않는 이유
	- JAR 패키징 할 때는 동작하지 않고, WAR 패키징 해야 함. 
	- Undertow는 JSP를 지원하지 않음.
	- https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-jsp-limitations

Thymeleaf 사용하기
	- https://www.thymeleaf.org/
	- https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html
	- 의존성 추가 : spring-boot-starter-thymeleaf
	- 템플릿 파일 위치 : /src/main/resources/template/
	- 예제
	   http://github.com/thymeleaf/thymeleafexamples-stsm/blob/3.0-master/src/main/webapp/WEB-INF/templates/seedstartermng.html


<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>Spring-boot-starter-thymeleaf</artifactId>
</dependency>
   
───────────────────────────────────────────
@Controller
public class SampleController{

	@GetMapping("/hello")
	public String hello(Model model){
		model.addAttribute("name", "keesun");
		return "hello";
	}	
}

@RunWith(SpringRunner.class)
@MockMvcTest(SampleController.class)
public class SampleControllerTest{
	@Autowired
	MockMvc mockMvc;

	@Test
	public void hello() throws Exception{
		// 요청 "/hello"
		// 응답 
		// - 모델 name : keesun
		// - 뷰 이름 : hello

		mockMvc.perform(get("/hello"))
			.andExpect(status().isOk())
			.andDo(print())
			.andExpect(view().name("hello"))
			.andExpect(model().attribute("name", is("keesun" )))
			.andExpect(content().string(containsString("keesun")));
	}
}
-------------------------







   












